name: XRT Build/Install Test CI
 
# Configures trigger:
# This workflow will be triggered on a pull request created for Master branch
on:
  workflow_call:
    inputs:
      branch:
        required: true
        type: string
    secrets:
      PROJ_PATH:
        required: true
      EXTRACTION_AREA:
        required: true

# Define environment variables
# Can be accessed as $<envvar> or ${{ env.envvar }} in this workflow
env:
  RELEASE: 2023.1
  TEST_PATH: ${{ secrets.PROJ_PATH }}/xbb/xrt/prod_pipeline/tests/2022.2/11_14_22_10

jobs:
  build_lnx_matrix:
    strategy:
      matrix:
        include:
         - os: centos8
           packageType: rpm
        #  - os: al2
        #    packageType: rpm
         - os: ubuntu2004
           packageType: deb
      fail-fast: false

    runs-on: self-hosted-${{ matrix.os }}
    steps:
    # Set version number and update PATH as git needs to be greater than 2.18
    - name: Set env variables
      run: |
        env
        echo "XRT_VERSION_PATCH=${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV
        echo "PATH=/usr/bin:$PATH" >> $GITHUB_ENV 

    - uses: actions/checkout@v3
      with:
        submodules: recursive
    # - name: Check cache
    #   id: cache-docker
    #   if: ${{ matrix.os == 'centos8' }}
    #   uses: actions/cache@v3
    #   with:
    #     path: ci/cache/docker/${{ matrix.os }}
    #     key: cache-docker-${{ matrix.os }}

    # - name: Create image if cache misses
    #   if: ${{ steps.cache-docker.outputs.cache-hit != 'true' && matrix.os == 'centos8' }}
    #   run: |
    #     cd .github/scripts/docker
    #     docker build -f Dockerfile-centos8 -t xrt-build-env-${{ matrix.os }}:latest .
    #     cd $GITHUB_WORKSPACE 
    #     mkdir -p ci/cache/docker/${{ matrix.os }}
    #     cd ci/cache/docker/${{ matrix.os }}
    #     docker save xrt-build-env-${{ matrix.os }}:latest | gzip > xrt-${{ matrix.os }}.tar.gz

    # - name: Use Cached image if cache hits
    #   if: ${{ steps.cache-docker.outputs.cache-hit == 'true' && matrix.os == 'centos8' }}
    #   run: docker load --input ./ci/cache/docker/${{ matrix.os }}/xrt-${{ matrix.os }}.tar.gz
    # docker run --rm -e DEBUG_DIR=Debug_${{ matrix.packageType }}_${{ matrix.os }} -e REL_DIR=Release_${{ matrix.packageType }}_${{ matrix.os }} -e XRT_VERSION_PATCH=$GITHUB_RUN_NUMBER  -v $GITHUB_WORKSPACE:/opt/xrt/:shared -v /proj:/proj:shared xrt-build-env-${{ matrix.os }}:latest 'sh src/runtime_src/tools/scripts/xrtdeps.sh -docker ; cd build && chmod +x build.sh ; sh build.sh'

    - name: Build XRT ${{ matrix.os }}
      if: ${{ matrix.os == 'centos8' || matrix.os == 'ubuntu2004' }}
      run: |
        docker pull artifactory.xilinx.com/xrt-build-docker-images-local/xrt-${{ matrix.os }}:latest
        docker run --rm -u xbuild -e DEBUG_DIR=Debug_${{ matrix.packageType }}_${{ matrix.os }} -e REL_DIR=Release_${{ matrix.packageType }}_${{ matrix.os }} -e XRT_VERSION_PATCH=$GITHUB_RUN_NUMBER  -v $GITHUB_WORKSPACE:/opt/xrt/:shared -v /proj:/proj:shared -v /tools:/tools:shared artifactory.xilinx.com/xrt-build-docker-images-local/xrt-${{ matrix.os }}:latest 'sudo src/runtime_src/tools/scripts/xrtdeps.sh -docker ; git init; cd build && chmod +x build.sh ;  ./build.sh'
      shell: bash

    - name: XRT Build ${{ matrix.os }}
      if: ${{ matrix.os == 'al2' }}
      run: |
        sudo src/runtime_src/tools/scripts/xrtdeps.sh -docker
        cd build && chmod +x build.sh && ./build.sh
      env:
        DEBUG_DIR: Debug_${{ matrix.packageType }}_${{ matrix.os }} 
        REL_DIR: Release_${{ matrix.packageType }}_${{ matrix.os }}
      shell: bash

    - name: Stash files
      # Stash files for using later in the workflow
      uses: actions/upload-artifact@v3
      with:
        name: xrt-${{ matrix.packageType }}-${{ matrix.os }}
        path: build/Release_${{ matrix.packageType }}_${{ matrix.os }}/xrt_*-xrt.${{ matrix.packageType }}

    - name: Stash tar.gx files on Centos8
      if: ${{ matrix.os == 'centos8'}}
      uses: actions/upload-artifact@v3
      with:
        name: xrt-rpm-tar-${{ matrix.os }}
        path: build/Release_${{ matrix.packageType }}_${{ matrix.os }}/xrt_*-xrt.tar.gz

  download_rpms:
    runs-on: self-hosted-centos8
    needs: [build_lnx_matrix]
    steps:
      - name: Download XRT rpms
        uses: actions/download-artifact@v3
        with:
          name: xrt-rpm-centos8
      - name: Create dirs and Move RPMs
        run: |
          mkdir -p ${{ secrets.EXTRACTION_AREA }}/results/$GITHUB_RUN_NUMBER/rpms
          mv *-xrt.rpm ${{ secrets.EXTRACTION_AREA }}/results/$GITHUB_RUN_NUMBER/rpms/
        shell: bash
  
  # cleanup_rpms:
  #   runs-on: self-hosted-centos8
  #   needs: [download_rpms]
  #   steps:
  #     - name: Cleanup rpms on disk
  #       if: ${{ always() }}
  #       run: |
  #         echo "Cleaning up previous run"
  #         rm -rf "${{ secrets.EXTRACTION_AREA }}/results/$GITHUB_RUN_NUMBER/rpms"
  #       shell: bash

# Testing
# 1. Emulation
# 2. Board testing
#   emulation_tests:
#     strategy:
#       matrix:
#         type: [pcie]
#         mode: [hw_emu]
#     runs-on: self-hosted-centos8
#     needs: [build_lnx_matrix]
#     steps:
#       - name: Setup results and build paths
#         run: |
#           mkdir -p ${{ secrets.EXTRACTION_AREA }}/results/$GITHUB_RUN_NUMBER/test-results/${{ matrix.type }}/${{ matrix.mode }} ${{ secrets.EXTRACTION_AREA }}/results/$GITHUB_RUN_NUMBER/build/${{ matrix.type }}/${{ matrix.mode }}/
#         shell: bash
#       - name: Download XRT tar
#         uses: actions/download-artifact@v3
#         with:
#           name: xrt-rpm-tar-centos8
#       - name: Run Emulation tests using rdi
#         run: |
#           tar -xzf xrt_*-xrt.tar.gz -C ${{ secrets.EXTRACTION_AREA }}/results/$GITHUB_RUN_NUMBER/build/${{ matrix.type }}/${{ matrix.mode }}
#           export RUN_ID=$GITHUB_RUN_NUMBER PROFILE_PATH=${{ secrets.PROJ_PATH }}/xbb/xrt/prod_pipeline/configs/$RELEASE/${{ matrix.type }}/${{ matrix.mode }}/gating.prf WS_PATH=$GITHUB_WORKSPACE RDI_DATA=${{ secrets.EXTRACTION_AREA }}/results/$GITHUB_RUN_NUMBER/test-results/${{ matrix.type }}/${{ matrix.mode }}/ BUILD_NUMBER=$GITHUB_RUN_NUMBER XRT_BUILD_PATH=${{ secrets.EXTRACTION_AREA }}/results/$GITHUB_RUN_NUMBER/build/${{ matrix.type }}/${{ matrix.mode }} XRT_BUILD_OS=centos_8.1
#           rdi regression --profile ${{ secrets.PROJ_PATH }}/xbb/xrt/prod_pipeline/configs/$RELEASE/${{ matrix.type }}/${{ matrix.mode }}/gating.prf --report-path ${{ secrets.EXTRACTION_AREA }}/results/$GITHUB_RUN_NUMBER/test-results/${{ matrix.type }}/${{ matrix.mode }}/ --results-path ${{ secrets.EXTRACTION_AREA }}/results/$GITHUB_RUN_NUMBER/test-results/${{ matrix.type }}/${{ matrix.mode }} --lsf-os-override --suite-category GATING,XRT
#         shell: bash
#       - name: Parse RDI yaml files
#         run: |
#           python ${{ secrets.PROJ_PATH }}/xbb/xrt//gh-actions/scripts/yaml_parser.py ${{ secrets.EXTRACTION_AREA }}/results/$GITHUB_RUN_NUMBER/test-results/${{ matrix.type }}/${{ matrix.mode }}//*.yml
      # - name: Cleanup Runner workspace path/build path
      #   if: ${{ always() }}
      #   run: |
      #     echo "Cleaning up previous run"
      #     rm -rf $GITHUB_WORKSPACE/xrt_*-xrt.tar.gz
      #     rm -rf ${{ secrets.EXTRACTION_AREA }}/results/$GITHUB_RUN_NUMBER/build/${{ matrix.type }}/${{ matrix.mode }}/
      #   shell: bash

  board_test_prep:
    runs-on: self-hosted-centos8
    needs: [download_rpms]
    steps:
      - name: get boardfarm interface code
        run: |
          git clone https://gitenterprise.xilinx.com/infra/boardfarm-interface.git
          cd boardfarm-interface/
          git checkout dev
          cd docker
          curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-Linux-x86_64" -o ./docker-compose
          chmod +x ./docker-compose
        shell: bash
      - name: Run board tests
        run: |
          mkdir -p ${resultPath}
          ${{ secrets.PROJ_PATH }}/xbb/xrt/prod_pipeline/configs/bin/gen_runner.sh ${resultPath} ${profile_path} ${GITHUB_WORKSPACE} ${GITHUB_RUN_NUMBER} ${xrt_build_path} xilinx_u50_gen3x4_xdma_2_202010_1 ${GITHUB_RUN_NUMBER} ${{ secrets.PROJ_PATH }}/xbb/xrt/prod_pipeline/tests/2023.1/11_28_22_11
          cd boardfarm-interface/docker
          ./docker-compose run --rm prod "python3 ./boardfarm.py --xsa-path /proj/sdxbf/xrt-test/2023.1/xilinx_u50_gen3x4_xdma_2_202010_1/latest/dsabin \
          --xrt-path ${xrt_build_path} --apu-path /proj/xbuilds/2023.1_daily_latest/internal_platforms/sw/versal/apu_packages/versal \
          --config-script /proj/sdxbf/beta/src/lib/boardfarm/cmds/pipeline_cmd --test-script ${resultPath}/runner.sh --output-dir ${resultPath} \
          --pipeline xrt --board u50 --debug"
        env: 
          resultPath: "${{ secrets.EXTRACTION_AREA }}/results/${GITHUB_RUN_NUMBER}/pcie/hw/xilinx_u50_gen3x4_xdma_2_202010_1"
          profile_path: "${{ secrets.EXTRACTION_AREA }}/results/configs/${env.RELEASE}/pcie/hw/gating.prf"
          xrt_build_path: "${{ secrets.EXTRACTION_AREA }}/results/${GITHUB_RUN_NUMBER}/rpms"
        shell: bash
